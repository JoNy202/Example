// <auto-generated />
using System;
using IntegraCompanies.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IntegraCompanies.Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220329140712_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IntegraCompanies.Data.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConnectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JurPersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("CompanyId");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("JurPersonId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Company");
                });

            modelBuilder.Entity("IntegraCompanies.Data.Models.CompanyMask", b =>
                {
                    b.Property<Guid>("CompanyMaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Mask")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("CompanyMaskId");

                    b.HasIndex("Mask");

                    b.HasIndex("CompanyId", "Mask")
                        .IsUnique();

                    b.ToTable("CompanyMask");
                });

            modelBuilder.Entity("IntegraCompanies.Data.Models.Connection", b =>
                {
                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConnectionServerId")
                        .HasColumnType("uuid");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsRazdel")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("ConnectionServerId", "DatabaseName")
                        .IsUnique();

                    b.ToTable("Connection");
                });

            modelBuilder.Entity("IntegraCompanies.Data.Models.ConnectionServer", b =>
                {
                    b.Property<Guid>("ConnectionServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ConnectionServerId");

                    b.ToTable("ConnectionServer");
                });

            modelBuilder.Entity("IntegraCompanies.Data.Models.JurPerson", b =>
                {
                    b.Property<Guid>("JurPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("JurPersonId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("JurPerson");
                });

            modelBuilder.Entity("IntegraCompanies.Data.Models.Company", b =>
                {
                    b.HasOne("IntegraCompanies.Data.Models.Connection", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntegraCompanies.Data.Models.JurPerson", "JurPerson")
                        .WithMany("Companys")
                        .HasForeignKey("JurPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("JurPerson");
                });

            modelBuilder.Entity("IntegraCompanies.Data.Models.CompanyMask", b =>
                {
                    b.HasOne("IntegraCompanies.Data.Models.Company", "Company")
                        .WithMany("CompanyMasks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IntegraCompanies.Data.Models.Connection", b =>
                {
                    b.HasOne("IntegraCompanies.Data.Models.ConnectionServer", "ConnectionServer")
                        .WithMany()
                        .HasForeignKey("ConnectionServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectionServer");
                });

            modelBuilder.Entity("IntegraCompanies.Data.Models.Company", b =>
                {
                    b.Navigation("CompanyMasks");
                });

            modelBuilder.Entity("IntegraCompanies.Data.Models.JurPerson", b =>
                {
                    b.Navigation("Companys");
                });
#pragma warning restore 612, 618
        }
    }
}
